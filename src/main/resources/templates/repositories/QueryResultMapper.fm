package ${BaseCrudNativeRepositoriesPackage};

import org.apache.commons.lang3.ClassUtils;

import javax.persistence.NoResultException;
import javax.persistence.Query;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;


@SuppressWarnings("unchecked")
public class QueryResultMapper
{

    private QueryResultMapper() {}


    private static String[] getFieldsName(Class<?> targetClass, String... fieldsName)
    {
        if (!ClassUtils.isPrimitiveWrapper(targetClass))
        {
            if (fieldsName == null || fieldsName.length == 0)
            {
                Field[] fields = targetClass.getDeclaredFields();
                fieldsName = new String[ fields.length ];

                for (int i=0; i<fields.length; i++)
                    fieldsName[i] = fields[i].getName();
            }
        }

        return fieldsName;
    }


    public static <T> T getSingleResult(Query query) throws Exception
    {
        try
        {
            return (T) query.getSingleResult();
        }
        catch (NoResultException e)
        {
            return null;
        }
    }


    public static <T> T getSingleResult(Query query, Class<T> targetClass, String... fieldsName) throws Exception
    {
        try
        {
            Object result = query.getSingleResult();
            return (T) readResult(result, targetClass, getFieldsName(targetClass, fieldsName));
        }
        catch (NoResultException e)
        {
            return null;
        }
    }


    public static <T> List<T> getResultList(Query query, Class<T> targetClass, String... fieldsName) throws Exception
    {
        List<T> list = new ArrayList<>();

        List<Object> resultList = query.getResultList();

        if (resultList != null && !resultList.isEmpty())
        {
            fieldsName = getFieldsName(targetClass, fieldsName);

            for (Object result : resultList)
                list.add( (T) readResult(result, targetClass, fieldsName) );
        }

        return list;
    }


    private static Object readResult(Object result, Class<?> targetClass, String... fieldsName) throws Exception
    {
        if (result == null)
            return null;

        if (!ClassUtils.isPrimitiveWrapper(targetClass))
        {
            // target is a custom object
            Object target   = targetClass.getDeclaredConstructor().newInstance();
            Object[] values = result.getClass().isArray() ? (Object[]) result : new Object[]{result};

            for (int i=0; i<fieldsName.length && i<values.length; i++)
            {
                setValue(target, fieldsName[i], values[i]);
            }

            return target;
        }
        else
        {
            // target is a primitive object
            return getValueByTargetType(result, targetClass);
        }
    }


    private static void setValue(Object target, String fieldName, Object value) throws Exception
    {
        Field field;

        try
        {
            field = target.getClass().getDeclaredField( fieldName );
        }
        catch (Exception e)
        {
            return;
        }

        value = getValueByTargetType(value, field.getType());

        field.setAccessible( true );
        field.set(target, value);
    }


    private static Object getValueByTargetType(Object value, Class<?> targetType)
    {
        if (value == null)
            return null;

        if (value instanceof Number)
        {
            if (targetType.equals(Byte.class))
                value = ((Number)value).byteValue();
            else
            if (targetType.equals(Short.class))
                value = ((Number)value).shortValue();
            else
            if (targetType.equals(Integer.class))
                value = ((Number)value).intValue();
            else
            if (targetType.equals(Long.class))
                value = ((Number)value).longValue();
            else
            if (targetType.equals(Float.class))
                value = ((Number)value).floatValue();
            else
            if (targetType.equals(Double.class))
                value = ((Number)value).doubleValue();
            else
            if (targetType.equals(String.class))
                value = ((Number)value).toString();
        }
        else
        if (targetType.equals(String.class))
        {
            value = value.toString();
        }

        return value;
    }

}

