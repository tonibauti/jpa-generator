package ${BaseRepositoriesTestPackage};

import ${BaseConstraintsRepositoriesTestPackage}.${DatabaseConstraints};
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.datasource.DataSourceUtils;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.ActiveProfiles;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;


@SpringBootTest
//@TestPropertySource({"classpath:/application.properties"})
//@ActiveProfiles("test")
public abstract class AbstractRepositoryTest
{
    protected final Logger logger = LoggerFactory.getLogger( getClass() );

    private Connection connection;
    private boolean disableConstraints;
    private List<String> constraintTablesName;


    protected AbstractRepositoryTest() {}


    protected abstract DataSource getDataSource();


    protected void disableConstraints(String... tables)
    {
        this.disableConstraints   = true;
        this.constraintTablesName = Arrays.asList( tables );
    }


    @BeforeEach
    protected void before() throws Exception
    {
        if (disableConstraints)
        {
            setEnableDataBaseConstraints(getCurrentConnection(), constraintTablesName, false);
        }
    }


    @AfterEach
    protected void after() throws Exception
    {
        if (disableConstraints)
        {
            setEnableDataBaseConstraints(getCurrentConnection(), constraintTablesName, true);
        }
    }


    private Connection getCurrentConnection() throws SQLException
    {
        if (connection == null)
        {
            connection = DataSourceUtils.getConnection( getDataSource() );
        }

        return connection;
    }


    private void setEnableDataBaseConstraints(Connection connection, List<String> constraintTablesName, boolean enable)
                                              throws SQLException
    {
        if (connection == null)
            throw new SQLException("connection is null");

        ${DatabaseConstraints}.getInstance().setConstraints(connection, constraintTablesName, enable);
    }

}

