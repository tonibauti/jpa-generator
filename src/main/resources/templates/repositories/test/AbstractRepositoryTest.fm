package ${BaseRepositoriesTestPackage};

import ${BaseConstraintsRepositoriesTestPackage}.*;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.datasource.DataSourceUtils;
import org.springframework.test.context.ActiveProfiles;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


@SpringBootTest
@ActiveProfiles("test")
public abstract class AbstractRepositoryTest
{
    protected final Logger logger = LoggerFactory.getLogger( getClass() );

    private Connection connection;
    private boolean disableConstraints;
    private List<String> constraintTablesName;

    private static final List<AbstractConstraints> DatabasesConstraints = new ArrayList<>();
    static
    {
        DatabasesConstraints.add( DB2Constraints.getInstance() );
        DatabasesConstraints.add( H2Constraints.getInstance() );
        DatabasesConstraints.add( HSQLDBConstraints.getInstance() );
        DatabasesConstraints.add( MariaDBConstraints.getInstance() );
        DatabasesConstraints.add( MySQLConstraints.getInstance() );
        DatabasesConstraints.add( OracleConstraints.getInstance() );
        DatabasesConstraints.add( PostgreSQLConstraints.getInstance() );
        DatabasesConstraints.add( SQLiteConstraints.getInstance() );
        DatabasesConstraints.add( SQLServerConstraints.getInstance() );
    }


    protected AbstractRepositoryTest() {}


    protected abstract DataSource getDataSource();


    protected void disableConstraints(String... tables)
    {
        this.disableConstraints   = true;
        this.constraintTablesName = Arrays.asList( tables );
    }


    @BeforeEach
    protected void before() throws Exception
    {
        if (disableConstraints)
        {
            setEnableDataBaseConstraints(getCurrentConnection(), constraintTablesName, false);
        }
    }


    @AfterEach
    protected void after() throws Exception
    {
        if (disableConstraints)
        {
            setEnableDataBaseConstraints(getCurrentConnection(), constraintTablesName, true);
        }
    }


    private Connection getCurrentConnection() throws SQLException
    {
        if (connection == null)
        {
            connection = DataSourceUtils.getConnection( getDataSource() );
        }

        return connection;
    }


    private void setEnableDataBaseConstraints(Connection connection, List<String> constraintTablesName, boolean enable)
                                              throws SQLException
    {
        if (connection == null)
            throw new SQLException("connection is null");

        String databaseProductName = connection.getMetaData().getDatabaseProductName();

        for (AbstractConstraints databaseConstraints : DatabasesConstraints)
        {
            if (databaseConstraints.getType().equalsIgnoreCase(databaseProductName))
            {
                databaseConstraints.setConstraints(connection, constraintTablesName, enable);
                return;
            }
        }

        throw new SQLException("not found how to enable/disable constraints for the database: " + databaseProductName);
    }

}

