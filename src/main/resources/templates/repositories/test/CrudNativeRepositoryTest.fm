package ${CrudRepositoriesTestPackage};

import ${BaseRepositoriesTestPackage}.AbstractRepositoryTest;
import ${BaseRepositoriesTestPackage}.DataTestFactory;
import ${CrudRepositoriesPackage}.${ClassName}CrudNativeRepository;
import ${ConfigPackage}.${JpaConfig};
import ${EntitiesPackage}.${Entity};
<#if isMultipleKey>
import ${EntitiesPackage}.${Key};
</#if>
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.PageRequest;
import org.springframework.test.annotation.Rollback;
import org.springframework.transaction.annotation.Transactional;
import javax.sql.DataSource;
import java.util.List;
<#list importList as import>
import ${import};
</#list>


@Transactional(transactionManager = ${JpaConfig}.TRANSACTION_MANAGER)
@Rollback(true)
public class ${ClassName}CrudNativeRepositoryTest extends AbstractRepositoryTest
{
    @Autowired
    @Qualifier(${JpaConfig}.DATASOURCE)
    private DataSource dataSource;

	@Autowired
    private ${ClassName}CrudNativeRepository ${objectName}CrudNativeRepository;


    public ${ClassName}CrudNativeRepositoryTest()
    {
        super();
        super.disableConstraints( ${Entity}.TABLE );
    }


    @Override
    protected DataSource getDataSource()
    {
        return dataSource;
    }


    protected ${ClassName}CrudNativeRepository getRepository()
    {
        return ${objectName}CrudNativeRepository;
    }


    protected ${Key} getKey()
    {
        <#if isMultipleKey>
        ${Key} key = new ${Key}();

        <#list pkFieldDataList as pkFieldData>
        key.${pkFieldData.setter}( DataTestFactory.get${pkFieldData.type}() );
        </#list>

        return key;
        <#else>
        <#list pkFieldDataList as pkFieldData>
        return DataTestFactory.get${pkFieldData.type}();
        </#list>
        </#if>
    }


    protected ${Entity} getEntity()
    {
        ${Entity} entity = new ${Entity}();

        <#list fieldDataList as fieldData>
        entity.${fieldData.setter}( DataTestFactory.get${fieldData.type}() );
        </#list>

        return entity;
    }


    protected ${Entity} getFilter()
    {
        ${Entity} entity = new ${Entity}();

        <#list filterDataList as filterData>
        entity.${filterData.setter}( DataTestFactory.get${filterData.type}() );
        </#list>

        return entity;
    }



    @Test
    public void count() throws Exception
    {
        logger.info("count");

        long result = getRepository().count( getFilter() );

        logger.info("result: " + result);
    }


    @Test
    public void countAll() throws Exception
    {
        logger.info("countAll");

        long result = getRepository().countAll();

        logger.info("result: " + result);
    }


    @Test
    public void exists() throws Exception
    {
        logger.info("exists");

        boolean result = getRepository().exists( getFilter() );

        logger.info("result: " + result);
    }


    @Test
    public void existsById() throws Exception
    {
        logger.info("existsById");

        boolean result = getRepository().existsById( getKey() );

        logger.info("result: " + result);
    }


    @Test
    public void find() throws Exception
    {
        logger.info("find");

        List<${Entity}> result = getRepository().find(getFilter(), PageRequest.of(0,10));

        logger.info("result: " + result);
    }


    @Test
    public void findAll() throws Exception
    {
        logger.info("findAll");

        List<${Entity}> result = getRepository().findAll( PageRequest.of(0,10) );

        logger.info("result: " + result);
    }


    @Test
    public void get() throws Exception
    {
        logger.info("get");

        ${Entity} result = getRepository().get( getFilter() );

        logger.info("result: " + result);
    }


    @Test
    public void getById() throws Exception
    {
        logger.info("getById");

        ${Entity} result = getRepository().getById( getKey() );

        logger.info("result: " + result);
    }


    @Test
    public void create() throws Exception
    {
        logger.info("create");

        int result = getRepository().create( getEntity() );

        logger.info("result: " + result);
    }


    @Test
    public void updateById() throws Exception
    {
        logger.info("updateById");

        int result = getRepository().update( getEntity() );

        logger.info("result: " + result);
    }


    @Test
    public void updateByFilter() throws Exception
    {
        logger.info("updateByFilter");

        int result = getRepository().update(getEntity(), getFilter());

        logger.info("result: " + result);
    }


    @Test
    public void deleteById() throws Exception
    {
        logger.info("deleteById");

        int result = getRepository().deleteById( getKey() );

        logger.info("result: " + result);
    }


    @Test
    public void deleteByFilter() throws Exception
    {
        logger.info("deleteByFilter");

        int result = getRepository().delete( getFilter() );

        logger.info("result: " + result);
    }


    @Test
    public void deleteAll() throws Exception
    {
        logger.info("deleteAll");

        int result = getRepository().deleteAll();

        logger.info("result: " + result);
    }


    @Test
    public void joinAll()
    {
        logger.info("joinAll");

        ${Entity} entity = getEntity();
        getRepository().joinAll( entity );

        logger.info("result: " + entity);
    }

}

