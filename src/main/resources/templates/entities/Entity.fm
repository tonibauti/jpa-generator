package ${EntitiesPackage};

import lombok.*;
import ${javaPackage}.persistence.*;
import java.io.Serializable;
<#if isJson>
import ${PersistencePackage}.Json;
import ${PersistencePackage}.JsonType;
import org.hibernate.annotations.TypeDef;
import org.hibernate.annotations.TypeDefs;
</#if>
<#if isGenericGenerator>
import org.hibernate.annotations.GenericGenerator;
</#if>
<#if isUuidGenerator>
import org.hibernate.annotations.UuidGenerator;
</#if>
<#if isPersistable>
import org.springframework.data.domain.Persistable;
</#if>
<#if auditing>
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
</#if>
<#list importList as import>
import ${import};
</#list>

<#if builder>
@Builder
</#if>
@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity(name = ${Entity}.NAME)
@Table
(
    name = ${Entity}.TABLE,
    indexes =
    {
        <#list indexDataList as indexData>
        @Index(name = "${indexData.name}",
               unique = ${indexData.unique?string},
               columnList = ${Entity}.${indexData.column}_COLUMN),<#if indexData_has_next>${lineSeparator()}</#if>
        </#list>
    }
)
<#if isJson>
@TypeDefs
({
    @TypeDef(typeClass = JsonType.class, defaultForType = Json.class)
})
</#if>
<#if auditing>
@EntityListeners(AuditingEntityListener.class)
</#if>
public class ${Entity} implements <#if isPersistable>Persistable<${Key}>, </#if>Serializable
{
    public static final String NAME  = "${entity}";

    public static final String TABLE = "${Table}";

    <#list fieldDataList as fieldData>
    public static final String ${fieldData.column}_COLUMN = "${fieldData.name}";
    </#list>

    <#if isPersistable>
    private transient boolean isNew = false;

    </#if>
    <#if isMultipleKey>

    @EmbeddedId // (<#list pkFieldDataList as pkFieldData>${pkFieldData.name}<#if pkFieldData_has_next>, </#if></#list>)
    <#if multipleKeyWithDifferentNames?has_content>
    @AttributeOverrides
    ({
        <#list multipleKeyWithDifferentNames as foreignKeyRef>
        @AttributeOverride(name = "${asProperty(foreignKeyRef.referencedColumnName)}", column=@Column(name = ${asColumn(foreignKeyRef.columnName)}_COLUMN)),
        </#list>
    })
    </#if>
    private ${Key} id;
    <#list fieldDataList as fieldData>
    <#if !fieldData.pk>

    <#list fieldData.annotations as annotation>
    ${annotation}
    </#list>
    private ${fieldData.type} ${fieldData.property};
    </#if>
    </#list>
    <#else>
    <#list fieldDataList as fieldData>

    <#list fieldData.annotations as annotation>
    ${annotation}
    </#list>
    private ${fieldData.type} ${fieldData.property};
    </#list>
    </#if>
    <#if externalForeignKeyList?has_content>
    <#list externalForeignKeyList as externalForeignKey>


    @ToString.Exclude // avoid an infinite loop by lombok
    ${externalForeignKey.mode}(mappedBy = ${externalForeignKey.mappedBy}, fetch = FetchType.LAZY)
    <#if externalForeignKey.fk.many>
    private List<${asClass(externalForeignKey.fk.foreignTable)}Entity> ${asProperty(externalForeignKey.fk.foreignTable)}EntityList${externalForeignKey.suffix};
    <#else>
    private ${asClass(externalForeignKey.fk.foreignTable)}Entity ${asProperty(externalForeignKey.fk.foreignTable)}Entity${externalForeignKey.suffix};
    </#if>
    </#list>
    </#if>
    <#if foreignKeyList?has_content>
    <#list foreignKeyList as foreignKey>


    @ToString.Exclude // avoid an infinite loop by lombok
    ${foreignKey.mode}(fetch = FetchType.LAZY, optional = ${foreignKey.fk.nullable?string})
    <#list foreignKey.annotations as annotation>
    ${annotation}
    </#list>
    private ${asClass(foreignKey.fk.foreignTable)}Entity ${asProperty(foreignKey.fk.foreignTable)}Entity${foreignKey.suffix};
    </#list>
    </#if>
    <#if encodedDataList?has_content>


    //
    // Encoded
    //
    <#list encodedDataList as encodedData>

    public ${encodedData.type} ${encodedData.getter}()
    {
        return ${encoder}.decode( ${encodedData.property} );
    }

    public void ${encodedData.setter}(${encodedData.type} ${encodedData.property})
    {
        this.${encodedData.property} = ${encoder}.encode( ${encodedData.property} );
    }
    </#list>

    </#if>
    <#if builder && encodedDataList?has_content>

    public static class ${Entity}Builder
    {
        <#list encodedDataList as encodedData>
        public ${Entity}Builder ${encodedData.property}(${encodedData.type} ${encodedData.property})
        {
            this.${encodedData.property} = ${encoder}.encode( ${encodedData.property} );
            return this;
        }<#if encodedData_has_next>${lineSeparator()}</#if>
        </#list>
    }

    </#if>
}
